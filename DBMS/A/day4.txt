car
Joins
views indexes tcl transaction control language 
Joins
1)cross join
	no. of rows (15)
	without any condition like 'where'
2)inner join
	1)equi join
	2)non equi join
	3)self join
3)outer join
	1)left join
	2)right join
	3)full outer join

cross join->

select * 
from emp,dept;

total columns = columns of emp + columns of dept =(5)
total rows = rows of emp(5) + rows of dept(3) = 5x3 = (15)
since deptno column is there in both emp and dept table we use e.deptno & d.deptno to uniquely select it
select e.empno,
if there is a 'where' condition then it is not cross join it is inner join;

inner join->

select e.empno,e.ename,e.deptno,d.deptno,d.dname
from emp e,dept d
where e.deotno=d.deptno (equi join (=))

minimum n-1 conditions to join n tables;

syntax2:

select e.empno,...
from emp e inner join dept d
on e.deptno=d.deptno

self join->

select * from e.empno,e.ename,e.mgr,m.empno,m.ename
from emp e,emp m
where e.mgr=m.empno;

syntax2:

select
e.empno,e.ename
from emp e inner join emp m on
e.mgr=m.empno

non-equi join->

write a query to display empno nam,e sal grade lowsal and high sal

SELECT e.empno,e.ename,e.sal,g.grade,g.losal,g.hisal
from emp e,salgrade g
where e.sal between g.losal and g.hisal;

Views

showing restricted view of a table 

when you want to provide limited access to the existing data,. then we create views

views are of 2 types

for views no seperate memory is allocated for storing data 

uses of views:
1.hide complexity of queries(joins,aggregate functions nested queries)
2.to give restricted access to few columns or rows from tables
3.hide table names to increase the security of data

Materialized View:
when your data is history data or non changeable data then we use materialized view.

create materialized view myview
as
select * from emp;

select count(*)
from (select distinct sal from emp) e
where e.sal>3000;

4 topmost sal->

select * from emp s
where 4>(select count(*)
from (select distinct sal from emp) e
where e.sal>s.sal)
order by sal desc;

select * from emp s
where 3=(select count(*)
from (select distinct sal from emp) e
where e.sal>s.sal)
order by sal desc;

DCL data control language
grant & revoke
